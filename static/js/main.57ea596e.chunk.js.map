{"version":3,"sources":["apis/darkskyAPI.js","actions/location.js","actions/action-types.js","components/LocationForm/GoogleMaps.js","components/LocationForm/LocationForm.js","components/Forecast/ForecastCurrent.js","components/Forecast/ForecastHourly.js","components/Forecast/Forecast.js","components/App.js","actions/forecast.js","reducers/locationReducer.js","reducers/index.js","reducers/forecastReducer.js","index.js"],"names":["axios","create","baseURL","process","setSpecifiedLocation","position","type","payload","latitude","longitude","GoogleMapComponent","props","state","searchValue","onMapClick","e","latLng","lat","lng","onChangeInput","preventDefault","setState","target","value","onPlacesChanged","currentPosition","searchBoxRef","current","getPlaces","geometry","location","React","createRef","this","prevProps","defaultZoom","defaultCenter","center","onClick","ref","bounds","controlPosition","window","google","maps","ControlPosition","LEFT_BOTTOM","style","zIndex","background","width","padding","display","flexDirection","borderRadius","height","marginLeft","fontSize","placeholder","boxSizing","border","marginTop","boxShadow","outline","textOverflow","onChange","Component","compose","withScriptjs","withGoogleMap","connect","fetchCurrentLocation","fetchSpecifiedLocation","LocationForm","getCurrentPosition","coords","onChangeLatitude","onChangeLongitude","onFormSubmit","parseFloat","navigator","geolocation","className","onSubmit","GoogleMaps","googleMapURL","loadingElement","containerElement","mapElement","isMarkerShown","date","currentDate","Date","time","apparentTemperature","toFixed","hour","getHours","minutes","getMinutes","toString","formatHour","getMonth","getDate","precipProbability","precipType","summary","timezone","replace","ForecastHourly","Forecast","renderHourly","data","map","forecastData","index","key","currentForecastProps","currently","hourly","App","fetchForecastCurrentLocation","setForecastClass","status","setCurrentLocation","formProps","forecastProps","forecast","icon","dispatch","a","darkskyAPI","get","response","combineReducers","action","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.57ea596e.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport default axios.create({\r\n  baseURL: `https://cors-anywhere.herokuapp.com/https://api.darksky.net/forecast/${\r\n    process.env.REACT_APP_DARK_SKY_SECRET_KEY\r\n  }`\r\n});\r\n","import {\r\n  FETCH_CURRENT_LOCATION,\r\n  FETCH_SPECIFIED_LOCATION,\r\n  SET_CURRENT_LOCATION,\r\n  SET_SPECIFIED_LOCATION\r\n} from \"./action-types\";\r\n\r\nexport const fetchCurrentLocation = () => {\r\n  return {\r\n    type: FETCH_CURRENT_LOCATION\r\n  };\r\n};\r\n\r\nexport const fetchSpecifiedLocation = () => {\r\n  return {\r\n    type: FETCH_SPECIFIED_LOCATION\r\n  };\r\n};\r\n\r\nexport const setCurrentLocation = position => {\r\n  return {\r\n    type: SET_CURRENT_LOCATION,\r\n    payload: {\r\n      latitude: position.coords.latitude,\r\n      longitude: position.coords.longitude\r\n    }\r\n  };\r\n};\r\n\r\nexport const setSpecifiedLocation = position => {\r\n  return {\r\n    type: SET_SPECIFIED_LOCATION,\r\n    payload: {\r\n      latitude: position.latitude,\r\n      longitude: position.longitude\r\n    }\r\n  };\r\n};\r\n","export const FETCH_FORECAST_CURRENT_LOCATION =\r\n  \"FETCH_FORECAST_CURRENT_LOCATION\";\r\nexport const FETCH_FORECAST_SPECIFIED_LOCATION =\r\n  \"FETCH_FORECAST_SPECIFIED_LOCATION\";\r\n\r\nexport const FETCH_CURRENT_LOCATION = \"FETCH_CURRENT_LOCATION\";\r\nexport const FETCH_SPECIFIED_LOCATION = \"FETCH_SPECIFIED_LOCATION\";\r\nexport const SET_CURRENT_LOCATION = \"SET_CURRENT_LOCATION\";\r\nexport const SET_SPECIFIED_LOCATION = \"SET_SPECIFIED_LOCATION\";\r\n\r\nexport const CONVERT_CELSIUS = \"CONVERT_CELSIUS\";\r\nexport const CONVERT_FAHRENHEIT = \"CONVERT_FAHRENHEIT\";\r\n","import React from \"react\";\r\n\r\nimport {\r\n  GoogleMap,\r\n  withScriptjs,\r\n  withGoogleMap,\r\n  Marker\r\n} from \"react-google-maps\";\r\n\r\nimport SearchBox from \"react-google-maps/lib/components/places/SearchBox\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport {\r\n  fetchCurrentLocation,\r\n  fetchSpecifiedLocation,\r\n  setSpecifiedLocation\r\n} from \"../../actions/location\";\r\n\r\nclass GoogleMapComponent extends React.Component {\r\n  state = {\r\n    searchValue: \"\"\r\n  };\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.searchBoxRef = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({\r\n      searchValue: `${this.props.location.latitude}, ${this.props.location.longitude}`\r\n    });\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.location !== this.props.location) {\r\n      this.setState({\r\n        searchValue: `${this.props.location.latitude}, ${this.props.location.longitude}`\r\n      });\r\n    }\r\n  }\r\n\r\n  onMapClick = e => {\r\n    const latitude = e.latLng.lat();\r\n    const longitude = e.latLng.lng();\r\n    this.props.setSpecifiedLocation({ latitude, longitude });\r\n  };\r\n\r\n  onChangeInput = e => {\r\n    e.preventDefault();\r\n    this.setState({ searchValue: e.target.value });\r\n  };\r\n\r\n  onPlacesChanged = () => {\r\n    const currentPosition = this.searchBoxRef.current.getPlaces()[0];\r\n    const latitude = currentPosition.geometry.location.lat();\r\n    const longitude = currentPosition.geometry.location.lng();\r\n    this.props.setSpecifiedLocation({ latitude, longitude });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <GoogleMap\r\n        defaultZoom={15}\r\n        defaultCenter={{\r\n          lat: this.props.location.latitude,\r\n          lng: this.props.location.longitude\r\n        }}\r\n        center={{\r\n          lat: this.props.location.latitude,\r\n          lng: this.props.location.longitude\r\n        }}\r\n        onClick={this.onMapClick}\r\n      >\r\n        <Marker\r\n          position={{\r\n            lat: this.props.location.latitude,\r\n            lng: this.props.location.longitude\r\n          }}\r\n        ></Marker>\r\n\r\n        <SearchBox\r\n          ref={this.searchBoxRef}\r\n          bounds={this.props.bounds}\r\n          controlPosition={window.google.maps.ControlPosition.LEFT_BOTTOM}\r\n          onPlacesChanged={this.onPlacesChanged}\r\n          style={{ zIndex: \"5\", background: \"Blue\" }}\r\n        >\r\n          <form\r\n            style={{\r\n              background: \"rgba(200,200,200, 0.9)\",\r\n              width: \"35%\",\r\n              padding: 16,\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n              borderRadius: \"4px\",\r\n              height: 95,\r\n              marginLeft: 8\r\n            }}\r\n          >\r\n            <label style={{ fontSize: \"0.8rem\" }}>\r\n              Location. Search for a place to determine weather forecast.\r\n            </label>\r\n            <label style={{ fontSize: \"0.8rem\" }}>Example: SM Megamall</label>\r\n            <label style={{ fontSize: \"0.8rem\" }}>Example: 14.5, 121.5</label>\r\n\r\n            <input\r\n              type=\"text\"\r\n              placeholder={`${this.props.location.latitude}, ${this.props.location.longitude}`}\r\n              style={{\r\n                boxSizing: `border-box`,\r\n                border: `1px solid transparent`,\r\n                width: `100%`,\r\n                height: `32px`,\r\n                marginTop: `27px`,\r\n                padding: `0 12px`,\r\n                borderRadius: `3px`,\r\n                boxShadow: `0 2px 6px rgba(0, 0, 0, 0.3)`,\r\n                fontSize: `14px`,\r\n                outline: `none`,\r\n                textOverflow: `ellipses`,\r\n                zIndex: \"5\"\r\n              }}\r\n              value={this.state.searchValue}\r\n              onChange={this.onChangeInput}\r\n            />\r\n          </form>\r\n        </SearchBox>\r\n\r\n        {/* <div>\r\n          <SearchBox\r\n            ref={this.searchBoxRef}\r\n            bounds={this.props.bounds}\r\n            controlPosition={window.google.maps.ControlPosition.LEFT}\r\n            onPlacesChanged={this.onPlacesChanged}\r\n          >\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Enter location (Can be coordinates or place)\"\r\n              style={{\r\n                boxSizing: `border-box`,\r\n                border: `1px solid transparent`,\r\n                width: `40%`,\r\n                height: `32px`,\r\n                marginTop: `27px`,\r\n                padding: `0 12px`,\r\n                borderRadius: `3px`,\r\n                boxShadow: `0 2px 6px rgba(0, 0, 0, 0.3)`,\r\n                fontSize: `14px`,\r\n                outline: `none`,\r\n                textOverflow: `ellipses`\r\n              }}\r\n            />\r\n          </SearchBox>\r\n        </div> */}\r\n      </GoogleMap>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  location: state.location\r\n});\r\n\r\nexport default compose(\r\n  withScriptjs,\r\n  withGoogleMap,\r\n  connect(\r\n    mapStateToProps,\r\n    { fetchCurrentLocation, fetchSpecifiedLocation, setSpecifiedLocation }\r\n  )\r\n)(GoogleMapComponent);\r\n","import React from \"react\";\r\n\r\nimport GoogleMapsComponent from \"./GoogleMaps\";\r\n\r\nimport \"./LocationForm.scss\";\r\nimport { connect } from \"react-redux\";\r\n\r\nclass LocationForm extends React.Component {\r\n  state = {\r\n    latitude: null,\r\n    longitude: null\r\n  };\r\n\r\n  componentDidMount() {\r\n    navigator.geolocation.getCurrentPosition(this.getCurrentPosition);\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.location !== this.props.location) {\r\n      this.setState({\r\n        latitude: this.props.location.latitude,\r\n        longitude: this.props.location.longitude\r\n      });\r\n    }\r\n  }\r\n\r\n  getCurrentPosition = position => {\r\n    this.setState({\r\n      latitude: position.coords.latitude,\r\n      longitude: position.coords.longitude\r\n    });\r\n  };\r\n\r\n  onChangeLatitude = e => {\r\n    this.setState({ latitude: e.target.value });\r\n  };\r\n\r\n  onChangeLongitude = e => {\r\n    this.setState({ longitude: e.target.value });\r\n  };\r\n\r\n  onFormSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.onFormSubmit(\r\n      parseFloat(this.state.latitude),\r\n      parseFloat(this.state.longitude)\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"locationform\" onSubmit={this.onFormSubmit}>\r\n        {/* <form className=\"locationform-container\">\r\n          <input\r\n            type=\"number\"\r\n            name=\"latitude\"\r\n            onChange={this.onChangeLatitude}\r\n            placeholder={this.state.latitude}\r\n            step=\".0000000000000000001\"\r\n          />\r\n          <input\r\n            type=\"number\"\r\n            name=\"longitude\"\r\n            onChange={this.onChangeLongitude}\r\n            placeholder={this.state.longitude}\r\n            step=\".0000000000000000001\"\r\n          />\r\n          <button type=\"submit\">Get weather forecast</button>\r\n        </form> */}\r\n        <GoogleMapsComponent\r\n          googleMapURL={`https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=${process.env.REACT_APP_GOOGLE_MAP_KEY}`}\r\n          loadingElement={<div className=\"loadingElement googlemap\" />}\r\n          containerElement={<div className=\"containerElement googlemap\" />}\r\n          mapElement={<div className=\"mapElement\" style={{ height: \"100%\" }} />}\r\n          isMarkerShown\r\n        ></GoogleMapsComponent>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  location: state.location\r\n});\r\nexport default connect(\r\n  mapStateToProps,\r\n  {}\r\n)(LocationForm);\r\n","import React from \"react\";\r\n\r\nimport { connect } from \"react-redux\";\r\n\r\nimport \"./ForecastCurrent.scss\";\r\n\r\nconst ForecastCurrent = props => {\r\n  const convertToCelsius = temp => {\r\n    return ((temp - 32) * (5 / 9)).toFixed(2);\r\n  };\r\n\r\n  const formatMonth = date => {\r\n    let month = date.getMonth();\r\n    const months = [\r\n      \"Jan\",\r\n      \"Feb\",\r\n      \"Mar\",\r\n      \"Apr\",\r\n      \"May\",\r\n      \"Jun\",\r\n      \"Jul\",\r\n      \"Aug\",\r\n      \"Sep\",\r\n      \"Oct\",\r\n      \"Nov\",\r\n      \"Dec\"\r\n    ];\r\n\r\n    return months[month];\r\n  };\r\n\r\n  const formatHour = date => {\r\n    let hour = date.getHours();\r\n    const minutes = date.getMinutes();\r\n    if (hour >= 13) {\r\n      hour = hour - 12;\r\n      return hour.toString() + \":\" + minutes.toString() + \" PM\";\r\n    } else if (hour === 0) {\r\n      return \"12\" + minutes.toString() + \" AM\";\r\n    } else if (hour <= 11) {\r\n      return hour.toString() + \":\" + minutes.toString() + \" AM\";\r\n    } else if (hour === 12) {\r\n      return \"12\" + \":\" + minutes.toString() + \" PM\";\r\n    }\r\n  };\r\n\r\n  const currentDate = new Date(props.time * 1000);\r\n\r\n  return (\r\n    <div className={`forecast-current`}>\r\n      <span className=\"forecast-current-temperature\">\r\n        {convertToCelsius(props.apparentTemperature)} °C\r\n      </span>\r\n      <div className=\"forecast-current-date\">\r\n        <span className=\"forecast-current-date-hour\">\r\n          {formatHour(currentDate)}\r\n        </span>{\" \"}\r\n        <span className=\"forecast-current-date-month\">\r\n          {formatMonth(currentDate)} {currentDate.getDate()}\r\n        </span>\r\n      </div>\r\n\r\n      <span className=\"forecast-current-rain-chance\">\r\n        {(props.precipProbability * 100).toFixed(2)}% chance to{\" \"}\r\n        {props.precipType}\r\n      </span>\r\n      <span className=\"forecast-current-summary\">{props.summary}</span>\r\n      <span className=\"forecast-current-timezone\">\r\n        {props.timezone.toString().replace(\"_\", \" \")}\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  date: state.date\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  {}\r\n)(ForecastCurrent);\r\n","import React from \"react\";\r\nimport \"./ForecastHourly.scss\";\r\n\r\nconst ForecastHourly = props => {\r\n  const convertToCelsius = temp => {\r\n    return ((temp - 32) * (5 / 9)).toFixed(2);\r\n  };\r\n\r\n  const formatMonth = date => {\r\n    let month = date.getMonth();\r\n    const months = [\r\n      \"Jan\",\r\n      \"Feb\",\r\n      \"Mar\",\r\n      \"Apr\",\r\n      \"May\",\r\n      \"Jun\",\r\n      \"Jul\",\r\n      \"Aug\",\r\n      \"Sep\",\r\n      \"Oct\",\r\n      \"Nov\",\r\n      \"Dec\"\r\n    ];\r\n\r\n    return months[month];\r\n  };\r\n\r\n  const formatHour = hour => {\r\n    if (hour >= 13) {\r\n      hour = hour - 12;\r\n      return hour.toString() + \"PM\";\r\n    } else if (hour === 0) {\r\n      return \"12AM\";\r\n    } else if (hour <= 11) {\r\n      return hour.toString() + \"AM\";\r\n    } else if (hour === 12) {\r\n      return \"12PM\";\r\n    }\r\n  };\r\n\r\n  const currentDate = new Date(props.time * 1000);\r\n  return (\r\n    <div className=\"forecast-hourly\">\r\n      <div>\r\n        <span className=\"forecast-hourly-time\">\r\n          {formatHour(currentDate.getHours())}\r\n        </span>\r\n        <span className=\"forecast-hourly-temperature\">\r\n          {convertToCelsius(props.apparentTemperature)} °C\r\n        </span>\r\n      </div>\r\n      <span className=\"forecast-hourly-date\">\r\n        {formatMonth(currentDate)} {currentDate.getDate()}\r\n      </span>\r\n      <span className=\"forecast-hourly-rain\">\r\n        {(props.precipProbability * 100).toFixed(2)}% chance to{\" \"}\r\n        {props.precipType}\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ForecastHourly;\r\n","import React from \"react\";\r\n\r\nimport \"./Forecast.scss\";\r\n\r\nimport ForecastCurrent from \"./ForecastCurrent\";\r\nimport ForecastHourly from \"./ForecastHourly\";\r\n\r\nclass Forecast extends React.Component {\r\n  renderHourly = data => {\r\n    return data.map((forecastData, index) => {\r\n      return <ForecastHourly key={index} {...forecastData} />;\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const currentForecastProps = {\r\n      ...this.props.forecastData.currently,\r\n      timezone: this.props.forecastData.timezone,\r\n      latitude: this.props.forecastData.latitude,\r\n      longitude: this.props.forecastData.longitude\r\n    };\r\n\r\n    return (\r\n      <div className=\"forecast\">\r\n        {this.props.forecastData && this.props.forecastData.currently ? (\r\n          <ForecastCurrent {...currentForecastProps}></ForecastCurrent>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n        <div className=\"forecast-hourly-container\">\r\n          {this.renderHourly(this.props.forecastData.hourly.data)}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Forecast;\r\n","import React from \"react\";\r\nimport \"./App.scss\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { fetchForecastCurrentLocation } from \"../actions/forecast\";\r\n\r\nimport { setCurrentLocation, setSpecifiedLocation } from \"../actions/location\";\r\n\r\nimport LocationForm from \"./LocationForm/LocationForm\";\r\nimport Forecast from \"./Forecast/Forecast\";\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    forecastData: null\r\n  };\r\n\r\n  componentDidMount() {\r\n    navigator.geolocation.getCurrentPosition(this.props.setCurrentLocation);\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.location !== this.props.location) {\r\n      this.props.fetchForecastCurrentLocation(this.props.location);\r\n    }\r\n  }\r\n\r\n  getCurrentPosition = position => {\r\n    this.props.fetchForecastCurrentLocation(position.coords);\r\n  };\r\n\r\n  onFormSubmit = (latitude, longitude) => {\r\n    this.props.setSpecifiedLocation({ latitude, longitude });\r\n  };\r\n\r\n  setForecastClass = status => {\r\n    switch (status) {\r\n      case \"clear-day\": {\r\n        return \"sunny\";\r\n      }\r\n      case \"clear-night\": {\r\n        return \"night\";\r\n      }\r\n      case \"rain\": {\r\n        return \"rainy-night\";\r\n      }\r\n      case \"partly-cloudy-day\": {\r\n        return \"cloudy-morning\";\r\n      }\r\n      case \"partly-cloudy-night\": {\r\n        return \"cloudy-night\";\r\n      }\r\n      case \"fog\": {\r\n        return \"fog\";\r\n      }\r\n      case \"cloudy\": {\r\n        return \"cloudy-morning\";\r\n      }\r\n      default: {\r\n        return \"\";\r\n      }\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const formProps = {\r\n      onFormSubmit: this.onFormSubmit\r\n    };\r\n\r\n    const forecastProps = {\r\n      forecastData: this.props.forecast,\r\n      currentDate: this.props.date\r\n    };\r\n\r\n    return (\r\n      <div className=\"container\">\r\n        {this.props.forecast.currently ? (\r\n          <div\r\n            className={`container-app container-app-${this.setForecastClass(\r\n              this.props.forecast.currently.icon\r\n            )}`}\r\n          >\r\n            <Forecast {...forecastProps} />\r\n            <LocationForm {...formProps} />\r\n          </div>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  location: state.location,\r\n  forecast: state.forecast\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  {\r\n    fetchForecastCurrentLocation,\r\n\r\n    setCurrentLocation,\r\n    setSpecifiedLocation\r\n  }\r\n)(App);\r\n","import { FETCH_FORECAST_CURRENT_LOCATION } from \"./action-types\";\r\nimport darkskyAPI from \"../apis/darkskyAPI\";\r\n\r\nexport const fetchForecastCurrentLocation = position => async dispatch => {\r\n  const response = await darkskyAPI.get(\r\n    `${position.latitude},${position.longitude}`\r\n  );\r\n  dispatch({ type: FETCH_FORECAST_CURRENT_LOCATION, payload: response.data });\r\n};\r\n","import {\r\n  FETCH_CURRENT_LOCATION,\r\n  FETCH_SPECIFIED_LOCATION,\r\n  SET_CURRENT_LOCATION,\r\n  SET_SPECIFIED_LOCATION\r\n} from \"../actions/action-types\";\r\n\r\nexport default (state = {}, action) => {\r\n  switch (action.type) {\r\n    case SET_CURRENT_LOCATION: {\r\n      return {\r\n        ...state,\r\n        ...action.payload\r\n      };\r\n    }\r\n    case FETCH_CURRENT_LOCATION: {\r\n      return state;\r\n    }\r\n    case SET_SPECIFIED_LOCATION: {\r\n      return {\r\n        ...state,\r\n        ...action.payload\r\n      };\r\n    }\r\n    case FETCH_SPECIFIED_LOCATION: {\r\n      return state;\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n","import { combineReducers } from \"redux\";\r\n\r\nimport forecastReducer from \"./forecastReducer\";\r\nimport locationReducer from \"./locationReducer\";\r\n\r\nexport default combineReducers({\r\n  forecast: forecastReducer,\r\n  location: locationReducer\r\n});\r\n","import {\r\n  FETCH_FORECAST_CURRENT_LOCATION,\r\n  FETCH_FORECAST_SPECIFIED_LOCATION\r\n} from \"../actions/action-types\";\r\n\r\nexport default (state = {}, action) => {\r\n  switch (action.type) {\r\n    case FETCH_FORECAST_CURRENT_LOCATION: {\r\n      return {\r\n        ...state,\r\n        ...action.payload\r\n      };\r\n    }\r\n    case FETCH_FORECAST_SPECIFIED_LOCATION: {\r\n      return {\r\n        ...state,\r\n        ...action.payload\r\n      };\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./components/App\";\n\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\n\nimport reducers from \"./reducers\";\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunk)));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}